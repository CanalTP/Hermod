openapi: "3.0.0"
info:
  description: >
    This API aims to improve the transport data accuracy by allowing consumers to suggest patches for different
    resources.
  version: "0.2.0"
  title: "Hermod - the Crowd sourcing API"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
tags:
  - name: "patches"
    description: "Suggest patches to improve information"
  - name: "status"
    description: "Verify the API status"
paths:
  /v1/patches/location:
    post:
      requestBody:
        required: true
        content:
          application/json+stop_point:
            schema:
              $ref: '#/components/schemas/LocationPatchStopPoint'
          application/json+elevator:
            schema:
              $ref: '#/components/schemas/LocationPatchElevator'
      tags:
        - "patches"
      summary: "Create a stop point patch"
      responses:
        201:
          description: "Everything went fine"
        400:
          $ref: '#/components/responses/InvalidRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - apiKey: []
  /v1/patches/location/from_user:
    post:
      tags:
      - "patches"
      summary: "Create a stop point patch using the given end-user GPS coord / accuracy"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationPatchStopPointFromUser'
      responses:
        201:
          description: "Everything went fine"
        400:
          $ref: '#/components/responses/InvalidRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - apiKey: []
  /v1/patches/status:
    post:
      tags:
      - "patches"
      summary: "Report the status of an equipment"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusPatchElevator'
      responses:
        201:
          description: "Everything went fine"
        400:
          $ref: '#/components/responses/InvalidRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - apiKey: []
  /v1/status:
    get:
      summary: "Utility endpoint to check if the service is up and running"
      tags:
        - "status"
      responses:
        200:
          description: "The API is reachable"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                    enum: ["OK", "KO"]
components:
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: Authorization
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnauthorizedError"
    InvalidRequestError:
      description: "Invalid request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InvalidRequestError"
  schemas:
    StatusPatchElevator:
      type: "object"
      required:
        - type
        - elevator
      properties:
        type:
          type: "string"
          example: "elevator"
          description: "Equipment type"
          enum: ["elevator", "stop_point"]
        elevator:
          $ref: '#/components/schemas/Elevator'
        current_status:
          $ref: "#/components/schemas/Status"
        patched_status:
          $ref: "#/components/schemas/Status"
    LocationPatchElevator:
      type: "object"
      required:
        - elevator
        - type
        - current_location
        - patched_location
      properties:
        type:
          type: "string"
          example: "elevator"
          description: "Equipment type"
          enum: ["elevator", "stop_point"]
        elevator:
          $ref: '#/components/schemas/Elevator'
        current_location:
          $ref: "#/components/schemas/Coord"
        patched_location:
          $ref: "#/components/schemas/Coord"
        gps:
          $ref: "#/components/schemas/Gps"
    Elevator:
      type: "object"
      required:
        - id
        - name
        - source
      properties:
        id:
          type: "string"
          description: "id of equipment"
        name:
          type: "string"
          description: "name of equipment"
        source:
          $ref: "#/components/schemas/Source"
    LocationPatchStopPoint:
      type: "object"
      required:
        - stop_point
        - type
        - current_location
        - patched_location
      properties:
        type:
          type: "string"
          example: "stop_point"
          description: "Equipment type"
          enum: ["elevator", "stop_point"]
        stop_point:
          $ref: '#/components/schemas/StopPoint'
        current_location:
          $ref: "#/components/schemas/Coord"
        patched_location:
          $ref: "#/components/schemas/Coord"
        gps:
          $ref: "#/components/schemas/Gps"
    LocationPatchStopPointFromUser:
      type: "object"
      required:
        - stop_point
        - type
        - current_location
      properties:
        type:
          type: "string"
          example: "stop_point"
          description: "Equipment type"
          enum: ["elevator", "stop_point"]
        stop_point:
          $ref: '#/components/schemas/StopPoint'
        current_location:
          $ref: "#/components/schemas/Coord"
        gps:
          $ref: "#/components/schemas/Gps"
    StopPoint:
      type: "object"
      required:
        - id
        - name
        - source
      properties:
        id:
          type: "string"
          description: "id of equipment"
        name:
          type: "string"
          description: "name of equipment"
        route:
          $ref: "#/components/schemas/Route"
        source:
          $ref: "#/components/schemas/Source"
    Source:
      type: "object"
      required: ["name"]
      properties:
        name:
          type: "string"
          description: "The data source name"
    Route:
      type: "object"
      required: ["id"]
      properties:
        id:
          type: "string"
          description: "Route id"
        name:
          type: "string"
          description: "Route name"
    Gps:
      type: "object"
      properties:
        location:
          $ref: '#/components/schemas/Coord'
        accuracy:
          type: "number"
          format: "float"
          description: "GPS accuracy (in meters)"
    Coord:
      type: "object"
      description: "Coordinates - WGS84"
      required: ["lat", "lon"]
      properties:
        lat:
          type: "number"
          format: "float"
        lon:
          type: "number"
          format: "float"
    Status:
        type: "string"
        enum: ["OK", "KO"]
    UnauthorizedError:
      properties:
        error:
          type: "string"
          enum: ["invalid_credentials"]
          example: "invalid_credentials"
        messages:
          type: "array"
          items:
            type: "string"
            example: "No user found with token XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"
    InvalidRequestError:
      properties:
        error:
          type: "string"
          enum: ["invalid_params"]
          example: "invalid_params"
        messages:
          type: "array"
          items:
            type: "string"
            example: "some input params are invalid"