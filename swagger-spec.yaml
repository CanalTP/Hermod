openapi: 3.0.0
info:
  description: >
    This API aims to improve the transport data accuracy by allowing consumers
    to suggest patches for different resources.<br> Don't forget to pass token
    in "Authorization" section header
  version: 0.2.2
  title: Hermod - the Crowdsourcing API
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
tags:
  - name: elevators
    description: Show elevators info
  - name: patches
    description: Suggest patches to improve information
  - name: status
    description: Verify the API status
servers:
  - url: '{protocol}://{server}'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
      server:
        default: api.example.com
paths:
  /v1/elevators/:
    get:
      summary: Show lastest patches for elevators
      tags:
        - elevators
      responses:
        '200':
          description: The API is reachable
          $ref: '#/components/responses/GetElevator'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      security:
        - apiKey: []
  /v1/patches/location:
    post:
      requestBody:
        required: true
        content:
          application/json+stop_point:
            schema:
              $ref: '#/components/schemas/LocationPatchStopPoint'
          application/json+elevator:
            schema:
              $ref: '#/components/schemas/LocationPatchElevator'
      tags:
        - patches
      summary: Update the location information
      responses:
        '201':
          description: Everything went fine
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      security:
        - apiKey: []
  /v1/patches/location/from_reporter:
    post:
      tags:
        - patches
      summary: Update the location information with reporter location
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationPatchStopPointFromReporter'
      responses:
        '201':
          description: Everything went fine
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      security:
        - apiKey: []
  /v1/patches/status:
    post:
      tags:
        - patches
      summary: Update the status information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusPatchElevator'
      responses:
        '201':
          description: Everything went fine
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      security:
        - apiKey: []
  /v1/status:
    get:
      summary: Utility endpoint to check if the service is up and running
      tags:
        - status
      responses:
        '200':
          description: The API is reachable
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - OK
                      - KO
        '403':
          $ref: '#/components/responses/ForbiddenError'
      security:
        - apiKey: []
components:
  securitySchemes:
    apiKey:
      type: "apiKey"
      name: "Authorization"
      in: "header"
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
    ForbiddenError:
      description: You doesn't have enought permission
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
    InvalidRequestError:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidRequestError'
    GetElevator:
      description: List of elevator status
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              $ref: '#/components/schemas/GetElevator'
  schemas:
    StatusPatchElevator:
      type: object
      required:
        - type
        - elevator
        - current_status
        - patched_status
      properties:
        type:
          type: string
          example: elevator
          description: Type of object sent
          enum:
            - elevator
        elevator:
          $ref: '#/components/schemas/Elevator'
        current_status:
          $ref: '#/components/schemas/Status'
        patched_status:
          $ref: '#/components/schemas/Status'
    GetStatusPatchElevator:
      type: object
      properties:
        current_status:
          $ref: '#/components/schemas/Status'
        patched_status:
          $ref: '#/components/schemas/Status'
        created_at:
          type: string
          format: date-time
    LocationPatchElevator:
      type: object
      required:
        - elevator
        - type
        - current_location
        - patched_location
      properties:
        type:
          $ref: '#/components/schemas/Type'
        elevator:
          $ref: '#/components/schemas/Elevator'
        current_location:
          $ref: '#/components/schemas/Coord'
        patched_location:
          $ref: '#/components/schemas/Coord'
        reporter_location:
          $ref: '#/components/schemas/ReporterLocation'
    GetLocationPatchElevator:
      type: object
      properties:
        patched_using_geoloc:
          type: boolean
        current_location:
          $ref: '#/components/schemas/Coord'
        patched_location:
          $ref: '#/components/schemas/Coord'
        reporter_location:
          $ref: '#/components/schemas/ReporterLocation'
        created_at:
          type: string
          format: date-time
    LocationPatchStopPoint:
      type: object
      required:
        - stop_point
        - type
        - current_location
        - patched_location
      properties:
        type:
          type: string
          example: stop_point
          description: Type of object sent
          enum:
            - stop_point
        stop_point:
          $ref: '#/components/schemas/StopPoint'
        current_location:
          $ref: '#/components/schemas/Coord'
        patched_location:
          $ref: '#/components/schemas/Coord'
        reporter_location:
          $ref: '#/components/schemas/ReporterLocation'
    LocationPatchStopPointFromReporter:
      type: object
      required:
        - stop_point
        - type
        - current_location
        - reporter_location
      properties:
        type:
          type: string
          example: stop_point
          description: Type of object sent
          enum:
            - stop_point
        stop_point:
          $ref: '#/components/schemas/StopPoint'
        current_location:
          $ref: '#/components/schemas/Coord'
        reporter_location:
          $ref: '#/components/schemas/ReporterLocation'
    Type:
      type: string
      example: elevator
      description: Type of object sent
      enum:
        - elevator
        - stop_point
    Elevator:
      type: object
      required:
        - name
        - human_location
        - direction
        - code
        - source
        - station
      properties:
        name:
          type: string
          description: name of elevator
        human_location:
          type: string
          description: Human location of elevator
        direction:
          type: string
          description: direction of elevator
        code:
          type: string
          description: code of elevator
        source:
          $ref: '#/components/schemas/Source'
        station:
          $ref: '#/components/schemas/Station'
    StopPoint:
      type: object
      required:
        - code
        - name
        - route
        - source
      properties:
        code:
          type: string
          description: code of stop point
        name:
          type: string
          description: name of stop point
        route:
          $ref: '#/components/schemas/Route'
        source:
          $ref: '#/components/schemas/Source'
    Source:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of repository containing object references
          example: navitia2
    Station:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: Station id
        name:
          type: string
          description: Station name
    Route:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: Route id
        name:
          type: string
          description: Route name
    ReporterLocation:
      type: object
      required:
        - ''
      properties:
        location:
          $ref: '#/components/schemas/Coord'
        accuracy:
          type: number
          format: int
          description: GPS accuracy (in meters)
    Coord:
      type: object
      description: Coordinates - WGS84
      required:
        - lat
        - lon
      properties:
        lat:
          type: number
          format: float
        lon:
          type: number
          format: float
    Status:
      type: string
      enum:
        - available
        - unavailable
        - coming_soon
        - disturbed
    GetElevator:
      type: object
      properties:
        name:
          type: string
          description: name of elevator
        human_location:
          type: string
          description: Human location of elevator
        direction:
          type: string
          description: direction of elevator
        code:
          type: string
          description: code of elevator
        source:
          $ref: '#/components/schemas/Source'
        station:
          $ref: '#/components/schemas/Station'
        status_patches:
          type: array
          items:
            $ref: '#/components/schemas/GetStatusPatchElevator'
        location_patches:
          type: array
          items:
            $ref: '#/components/schemas/GetLocationPatchElevator'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    UnauthorizedError:
      properties:
        error:
          type: string
          enum:
            - invalid_credentials
          example: invalid_credentials
        messages:
          type: array
          items:
            type: string
            example: Credential is invalid
    ForbiddenError:
      properties:
        error:
          type: string
          enum:
            - forbidden
          example: forbidden
        messages:
          type: array
          items:
            type: string
            example: You can't access to this specified resource
    InvalidRequestError:
      properties:
        error:
          type: string
          enum:
            - invalid_params
          example: invalid_params
        messages:
          type: array
          items:
            type: string
            example: 'Error at [type]: This field is missing.'
    BadRequestError:
      properties:
        error:
          type: string
          enum:
            - bad_request
          example: bad_request
        messages:
          type: array
          items:
            type: string
            example: >-
              missing headers: 'id', 'code', station_id', 'station_name',
              'human_location', 'direction', 'source_name'
